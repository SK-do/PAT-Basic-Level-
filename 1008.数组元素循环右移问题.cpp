#include<stdio.h>

/*
一个数组A中存有N（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由（A0A1...An-1)
变换为（An-m...An-1A0A1...An-m-1）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？

输入格式:
每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。
输入样例:
6 2
1 2 3 4 5 6

输出格式:
在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。
输出样例:
5 6 1 2 3 4
*/

int main()
{
	int n,m,t[101],temp;
	int j,k; 
	if(scanf("%d",&n)>=1 && scanf("%d",&m)>=0)
	{		
		if(m >= n)  //移动步数大于数组容量 
			m = m%n;
		
		for(int i=0; i<n; i++)
			scanf("%d",&t[i]);
		for(int i=0; i<m; i++)
		{
			temp = t[i];  //依次取前m个数 
//			printf("\ntemp1=%d\n",temp);
			k=i;
//			printf("\ni=%d,k=%d\n",i,k);
			for(j=n-m+i; j>i; j=j-m)  //遍历t数组，实现循环右移 
			{
//				printf("!%d! #%d#",t[k],t[j]);
				t[k] = t[j];
				k = j;
			}
//			printf("\nj=%d,k=%d\n",j,k);
			t[k] = temp;
//			printf("\ntemp2=%d\n",t[k]);
		}
	}
	for(int i=0; i<n-1; i++)
		printf("%d ",t[i]);
	printf("%d\n",t[n-1]);
	return 0;
}
